package com.github.overengineered.conveyor;

import freemarker.cache.ClassTemplateLoader;
import freemarker.cache.FileTemplateLoader;
import freemarker.cache.MultiTemplateLoader;
import freemarker.cache.TemplateLoader;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.FileUtils;

class Engine {
    private final Configuration mConfig;
    private final Map<String, String> mTemplateProperties;

    public Engine() {
        mConfig = new Configuration(Configuration.VERSION_2_3_25);
        mConfig.setDefaultEncoding("UTF-8");
        mConfig.setLocale(Locale.US);
        mConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        mConfig.setLogTemplateExceptions(false);

        List<TemplateLoader> loaders = new ArrayList<>();
        addTemplateDirectory(loaders, "templates");
        ClassLoader processClassLoader = Thread.currentThread().getContextClassLoader();
        loaders.add(new ClassTemplateLoader(processClassLoader, "/templates"));
        mConfig.setTemplateLoader(new MultiTemplateLoader(toArray(loaders)));

        mTemplateProperties = new HashMap<>();
        mTemplateProperties.put("start", "Code below is generated according to template above. ///*/");
        mTemplateProperties.put("end", "Code generated by Conveyor. ///*/");
    }

    private TemplateLoader[] toArray(List<TemplateLoader> list) {
        return list.toArray(new TemplateLoader[list.size()]);
    }

    private void addTemplateDirectory(List<TemplateLoader> list, String dirName) {
        try {
            list.add(new FileTemplateLoader(new File(dirName)));
        }
        catch (IOException e) {
        }
    }

    public final void update(File file) throws IOException, TemplateException {
        String baseName = FilenameUtils.getBaseName(file.getName());
        String filePath = FilenameUtils.getFullPath(file.getPath());
        String[] dirs = filePath.split(Pattern.quote(File.separator));
        int jIndex = Arrays.asList(dirs).indexOf("java");

        String packageName = (jIndex < 0) ? "default" :
                String.join(".", Arrays.copyOfRange(dirs, jIndex + 1, dirs.length));

        Map<String, String> fileProperties = new HashMap<>();
        fileProperties.put("name", baseName);
        fileProperties.put("package", packageName);
        fileProperties.put("startHash", String.valueOf(baseName.hashCode()));

        Map<String, Object> conveyorProperties = new HashMap<>();
        conveyorProperties.put("template", mTemplateProperties);
        conveyorProperties.put("file", fileProperties);

        Map<String, Object> dataModel = new HashMap<>();
        dataModel.put("conveyor", conveyorProperties);

        StringBuilder templateLines = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                templateLines.append(line).append(System.lineSeparator());
                if (line.contains("{conveyor.template.end}"))
                    break;
            }
        }

        String templateText = templateLines.toString();
        StringReader reader = new StringReader(templateText);
        Template template = new Template(file.getPath(), reader, mConfig);

        byte[] output;
        try (ByteArrayOutputStream outStream = new ByteArrayOutputStream()) {
            try (OutputStreamWriter writer = new OutputStreamWriter(outStream)) {
                writer.write(templateText, 0, templateText.length());
                template.process(dataModel, writer);
            }
            output = outStream.toByteArray();
        }

        FileUtils.writeByteArrayToFile(file, output);
    }
}
